import pytest
from freezegun import freeze_time
from src.Analytics import *


# generated by auto_generate_test_data module
data_streak = [['2024-05-13,2024-05-14,2024-05-16,2024-05-17,2024-05-19,2024-05-20,2024-05-21,2024-05-22,2024-05-25,'
                '2024-05-26,2024-05-27,2024-05-28,2024-05-29,2024-06-01,2024-06-02,2024-06-03,2024-06-05,2024-06-06,'
                '2024-06-07,2024-06-08,2024-06-09,2024-06-10,2024-06-11'],
               ['2024-05-13,2024-05-17,2024-05-20,2024-05-21,2024-05-22,2024-05-23,2024-05-24,2024-05-25,2024-05-26,'
                '2024-05-28,2024-05-29,2024-05-31,2024-06-01,2024-06-02,2024-06-03,2024-06-05,2024-06-06,2024-06-07,'
                '2024-06-08,2024-06-09,2024-06-10'],
               ['2024-03-13,2024-03-20,2024-03-27,2024-04-03,2024-04-10,2024-04-17,2024-04-24,2024-05-01,2024-05-08,'
                '2024-05-15,2024-05-22,2024-05-29'],
               ['2024-03-20,2024-03-27,2024-04-10,2024-04-17,2024-04-24,2024-05-01,2024-05-08,2024-05-15,2024-05-22,'
                '2024-05-29'],
               ['2024-01-13,2024-03-13,2024-04-13,2024-05-13'],
               ['2024-01-13,2024-02-13,2024-03-13,2024-04-13,2024-05-13'],
               ['2019-06-09,2020-06-09,2021-06-09,2022-06-09,2023-06-09'],
               ['2021-06-09,2022-06-09,2023-06-09']]


@freeze_time("2024-06-13")
@pytest.fixture(scope = 'session')
def habit_list():
    a = Habit('test1', " test...", periodicity = HabitPeriods.DAILY,
              creation_date = "2024-04-15", history = data_streak[0][0])
    b = Habit('test2', " test...", periodicity = HabitPeriods.DAILY,
              creation_date = "2024-04-15",  history = data_streak[1][0])
    c = Habit('test3', " test...", periodicity = HabitPeriods.WEEKLY,
              creation_date = "2024-04-15",  history = data_streak[2][0])
    d = Habit('test4', " test...", periodicity = HabitPeriods.WEEKLY,
              creation_date = "2024-04-15",  history = data_streak[3][0])
    e = Habit('test5', " test...", periodicity = HabitPeriods.MONTHLY,
              creation_date = "2024-01-15",  history = data_streak[4][0])
    f = Habit('test6', " test...", periodicity = HabitPeriods.MONTHLY,
              creation_date = "2024-01-15",  history = data_streak[5][0])
    g = Habit('test7', " test...", periodicity = HabitPeriods.YEARLY,
              creation_date = "2004-04-15",  history = data_streak[6][0])
    h = Habit('test8', " test...", periodicity = HabitPeriods.YEARLY,
              creation_date = "2004-04-15",  history = data_streak[7][0])

    return {'test1': a, 'test2': b, 'test3': c, 'test4': d,
            'test5': e, 'test6': f, 'test7': g, 'test8': h}


def test_currently_tracked_habits(habit_list):
    habits = list_currently_tracked_habits(list(habit_list.values()))
    print("\n testing currently tracked habits")
    assert habits == ['test1', 'test2', 'test3', 'test4', 'test5', 'test6', 'test7', 'test8']


@freeze_time("2024-06-13")
def test_checked_habits(habit_list):
    habit_list['test1'].check_off()
    habit_list['test3'].check_off()
    habit_list['test5'].check_off()
    habit_list['test6'].check_off()
    habits = list_currently_checked_habits(list(habit_list.values()))
    print("\n testing currently checked habits")
    assert habits == ['test1', 'test3', 'test5', 'test6']


@freeze_time("2024-06-13")
def test_unchecked_habits(habit_list):
    habits = list_currently_unchecked_habits(list(habit_list.values()))
    print("\n testing currently unchecked habits")
    assert habits == ['test2', 'test4', 'test7', 'test8']


def test_habits_with_periodicity_daily(habit_list):
    habits = list_habit_with_periodicity(list(habit_list.values()), periodicity = HabitPeriods.DAILY)
    print("\n Testing daily habits")
    assert habits == ['test1', 'test2']


def test_habits_with_periodicity_weekly(habit_list):
    habits = list_habit_with_periodicity(list(habit_list.values()), periodicity = HabitPeriods.WEEKLY)
    print("\n Testing weekly habits")
    assert habits == ['test3', 'test4']


def test_habits_with_periodicity_monthly(habit_list):
    habits = list_habit_with_periodicity(list(habit_list.values()), periodicity = HabitPeriods.MONTHLY)
    print("\n Testing monthly habits")
    assert habits == ['test5', 'test6']


def test_habits_with_periodicity_yearly(habit_list):
    habits = list_habit_with_periodicity(list(habit_list.values()), periodicity = HabitPeriods.YEARLY)
    print("\n Testing yearly habits")
    assert habits == ['test7', 'test8']


def test_analytics_habit_streaks():
    history = data_streak[0][0].split(',')
    habit_history = []
    for dates in history:
        habit_history.append(datetime.strptime(dates, '%Y-%m-%d'))
    curr_streak, long_streak = analytics_habit_streak(habit_history, HabitPeriods.DAILY)
    assert curr_streak == 7
    assert long_streak == 7


def test_analyze_habit_breaks(habit_list):
    history = data_streak[0][0].split(',')
    habit_history = []
    for dates in history:
        habit_history.append(datetime.strptime(dates, '%Y-%m-%d'))
    long_break, total_breaks = analytics_habit_breaks(habit_history, HabitPeriods.DAILY)
    assert long_break == 2
    assert total_breaks == 5
